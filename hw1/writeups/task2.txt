Walk through your supersampling algorithm and data structures. Why is supersampling useful? What modifications did you make to the rasterization pipeline in the process? Explain how you used supersampling to antialias your triangles.

The supersampling algorithm involves splitting each pixel into #sample_rate pixels. This allow the within triangle check to be more precise, though it look more blurry. This changes the SVG::draw step to draw at a higher resolution and DrawRend::redraw to downscale the resolution, averaging the merged samples. Alias occurs when resolution is not high enough, creating jagged edges. By supersampling, we are increasing the resolution, albeit temporarily. This adds an extra dimensionality to it, allowing the result to look closer to the real thing.

I define the program to loop through each pixel at a time. So, the correct code order is to wait.

Show png screenshots of basic/test4.svg with the default viewing parameters and sample rates 1, 4, and 16 to compare them side-by-side. Position the pixel inspector over an area that showcases the effect dramatically; for example, a very skinny triangle corner. Explain why these results are observed.

We compared the skinny triangle at sample rates 1, 4, and 16. We observed that a detached head is reconnected as sample rate increase. This is because the pixel overlap with the triangle, but the center of the pixel doesn't. So, supersampling connects the triangle together.

Extra credit: If you implemented alternative antialiasing methods, describe them and include comparison pictures demonstrating the difference between your method and grid-based supersampling.